//S_ave
kernel void S_ave(global const int* A, global int* B) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	int sum = 0;
	barrier(CLK_GLOBAL_MEM_FENCE);
	for (int i = 0; i < N; i++)
	{
		sum = sum + A[i];
		barrier(CLK_GLOBAL_MEM_FENCE);
	}
	B[0] = sum;
}

// P_ave
kernel void P_ave(global const int* A, global int* B, local int* scratch) {
	int id = get_global_id(0);
	int lid = get_local_id(0);
	int N = get_local_size(0);
	//cache all N values from global memory to local memory
	scratch[lid] = A[id];
	//wait for all local threads to finish copying from global to local memory
	barrier(CLK_LOCAL_MEM_FENCE);
	int s = 1;
	for (int i = N; i >= 1; i /= 2)
	{
		s *= 2;
		if (((lid % s)==0) && ((lid + s / 2) < N))
			scratch[lid] += scratch[lid + s / 2];

		barrier(CLK_LOCAL_MEM_FENCE);
	}
	//we add results from all local groups to the first element of the array
	//serial operation! but works for any group size
	//copy the cache to output array
	if (!lid) {
		atomic_add(&B[0],scratch[lid]);
	}
}

// S_Sd
kernel void S_Sd(global const int* A, global int* B) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	int sum = 0;
	int temp = 0;
	int ave = 0;
	barrier(CLK_GLOBAL_MEM_FENCE);

	for (int i = 0; i < N; i++)
	{
		sum += A[i];
	}
	ave = sum / N;
	
	barrier(CLK_GLOBAL_MEM_FENCE);
	for (int j = 0; j < N; j++)
	{
		temp += (ave - A[j])*(ave - A[j]);
	}
	B[0] = temp;
}
