{\rtf1\ansi\ansicpg936\deff0\nouicompat\deflang1033\deflangfe2052{\fonttbl{\f0\fnil NSimSun;}{\f1\fnil\fcharset134 NSimSun;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}}
{\colortbl ;\red128\green128\blue128;\red0\green0\blue0;\red111\green0\blue138;\red163\green21\blue21;\red0\green0\blue255;\red0\green128\blue0;\red43\green145\blue175;}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\cf1\f0\fs19\lang2052 #define\cf2  \cf3 CL_USE_DEPRECATED_OPENCL_1_2_APIS\f1  //\'ca\'b9\'d3\'c3\'b7\'b4\'b6\'d4\'a3\'bf\'a3\'bf\'a3\'bf\'d7\'f7\'d3\'c3\'b2\'bb\'d6\'aa\cf2\f0\par
\cf1 #define\cf2  \cf3 __CL_ENABLE_EXCEPTIONS\f1  //\'bf\'c9\'c4\'dc\'b5\'c4\'d2\'e2\'cd\'e2\'a3\'bf\'a3\'bf\'a3\'bf\'d7\'f7\'d3\'c3\'b2\'bb\'d6\'aa\cf2\f0\par
\par
\cf1\b #include\cf2  \cf4 <iostream>\f1  //C++\'bb\'f9\'b1\'be\'bf\'e2\cf2\f0\par
\cf1 #include\cf2  \cf4 <vector>\f1  //\'ca\'b8\'c1\'bf\'bf\'e2\cf2\f0\par
\b0\par
\cf1\b #ifdef\cf2  __APPLE__\f1  //\'c6\'bb\'b9\'fb\'a3\'bf\'a3\'bf\'a3\'bf\'d7\'f7\'d3\'c3\'b2\'bb\'d6\'aa\f0\par
\cf1 #include\cf2  \cf4 <OpenCL/cl.hpp>\f1  //C++ \'bd\'d3\'bf\'da\'b4\'b4\'bd\'a8kernel\cf2\f0\par
\cf1 #else\cf2\par
\cf1 #include\cf2  \cf4 <CL/cl.hpp>\cf2\par
\cf1 #endif\cf2\par
\b0\par
\cf1 #include\cf2  \cf4 "Utils.h"\f1  \par
//.h\'ce\'c4\'bc\'fe\'ca\'b5\'cf\'d6\'b5\'c4\'b9\'a6\'c4\'dc\'ca\'c7\'c9\'f9\'c3\'f7\'b1\'be\'ce\'c4\'bc\'fe\'bb\'f2.cpp\'ce\'c4\'bc\'fe\'d6\'d0\'d0\'e8\'d2\'aa\'b1\'bb\'b1\'f0\'c8\'cb\'ca\'b9\'d3\'c3\'bb\'f2\'d6\'aa\'b5\'c0\'b5\'c4\'b1\'e4\'c1\'bf\'a1\'a2\'c0\'e0\'d0\'cd\'a1\'a2\'ba\'af\'ca\'fd\'bc\'b0\'ba\'ea\'b6\'a8\'d2\'e5\'b5\'c8\'a1\'a3.h\'ce\'c4\'bc\'fe\'be\'cd\'cf\'f1\'ca\'c7\'d2\'bb\'b8\'f6\'bd\'d3\'bf\'da\'a3\'ac\'be\'df\'cc\'e5\'b5\'c4\'ca\'b5\'cf\'d6\'bf\'c9\'d2\'d4\'d4\'da.cpp\'d6\'d0\'d2\'b2\'bf\'c9\'d2\'d4\'d4\'da.h\'d6\'d0\cf2\f0\par
\f1 // \'cc\'e1\'ca\'be\'b4\'f2\'d3\'a1\f0\par
\cf5 void\cf2  print_help() \{\par
\tab std::cerr << \cf4 "Application usage:"\cf2  << std::endl;\par
\par
\tab std::cerr << \cf4 "  -p : select platform "\cf2  << std::endl;\par
\tab std::cerr << \cf4 "  -d : select device"\cf2  << std::endl;\par
\tab std::cerr << \cf4 "  -l : list all platforms and devices"\cf2  << std::endl;\par
\tab std::cerr << \cf4 "  -h : print this message"\cf2  << std::endl;\par
\}\par
\f1 // argc\'ca\'c7\'c3\'fc\'c1\'ee\'d0\'d0\'d7\'dc\'b5\'c4\'b2\'ce\'ca\'fd\'b8\'f6\'ca\'fd \'a3\'bbargv[]\'ce\'aa\'b1\'a3\'b4\'e6\'c3\'fc\'c1\'ee\'d0\'d0\'b2\'ce\'ca\'fd\'b5\'c4\'d7\'d6\'b7\'fb\'b4\'ae\'d6\'b8\'d5\'eb\'a3\'ac\'c6\'e4\'d6\'d0\'b5\'da0\'b8\'f6\'b2\'ce\'ca\'fd\'ca\'c7\'b3\'cc\'d0\'f2\'b5\'c4\'c8\'ab\'c3\'fb\f0\par
\cf5\b int\cf2  main(\cf5 int\cf2  \cf1 argc\cf2 , \cf5 char\cf2  **\cf1 argv\cf2 ) \{\par
\b0\tab\cf6 //Part 1 - handle command line options such as device selection, verbosity, etc.\cf2\par
\tab\cf6 //\f1\'b5\'da1\'b2\'bf\'b7\'d6 - \'b4\'a6\'c0\'ed\'c3\'fc\'c1\'ee\'d0\'d0\'d1\'a1\'cf\'ee\'a3\'ac\'c0\'fd\'c8\'e7\'c9\'e8\'b1\'b8\'d1\'a1\'d4\'f1\'a3\'ac\'cf\'ea\'cf\'b8\'b3\'cc\'b6\'c8\'b5\'c8\'a1\'a3\cf2\par
\tab\cf5 int\cf2  platform_id = 0; // \'c6\'bd\'cc\'a8\par
\tab\cf5 int\cf2  device_id = 0; // \'c9\'e8\'b1\'b8\par
\par
\tab\cf5 for\cf2  (\cf5 int\cf2  i = 1; i < \cf1 argc\cf2 ; i++)\tab\{\par
\tab\tab\cf5 if\cf2  ((strcmp(\cf1 argv\cf2 [i], \cf4 "-p"\cf2 ) == 0) && (i < (\cf1 argc\cf2  - 1))) \{ platform_id = atoi(\cf1 argv\cf2 [++i]); \}\par
\tab\tab\cf5 else\cf2  \cf5 if\cf2  ((strcmp(\cf1 argv\cf2 [i], \cf4 "-d"\cf2 ) == 0) && (i < (\cf1 argc\cf2  - 1))) \{ device_id = atoi(\cf1 argv\cf2 [++i]); \}\par
\tab\tab\cf5 else\cf2  \cf5 if\cf2  (strcmp(\cf1 argv\cf2 [i], \cf4 "-l"\cf2 ) == 0) \{ std::cout << ListPlatformsDevices() << std::endl; \}\par
\tab\tab\cf5 else\cf2  \cf5 if\cf2  (strcmp(\cf1 argv\cf2 [i], \cf4 "-h"\cf2 ) == 0) \{ print_help(); \cf5 return\cf2  0;\}\par
\tab\}\par
\par
\tab\cf6 //detect any potential exceptions\cf2\par
\tab\cf6 //\'bc\'ec\'b2\'e2\'c8\'ce\'ba\'ce\'c7\'b1\'d4\'da\'b5\'c4\'d2\'ec\'b3\'a3\cf2\par
\tab\cf5 try\cf2  \{\par
\tab\tab\cf6 //Part 2 - host operations\cf2\par
\tab\tab\cf6 //\'b5\'da2\'b2\'bf\'b7\'d6 - \'d6\'f7\'bb\'fa\'b2\'d9\'d7\'f7\cf2\par
\tab\tab\cf6 //2.1 Select computing devices\cf2\par
\tab\tab\cf6 //2.1\'d1\'a1\'d4\'f1\'bc\'c6\'cb\'e3\'c9\'e8\'b1\'b8\cf2\par
\tab\tab cl::Context context = GetContext(platform_id, device_id);\par
\par
\tab\tab\cf6 //display the selected device\cf2\par
\tab\tab\cf6 //\'cf\'d4\'ca\'be\'cb\'f9\'d1\'a1\'c9\'e8\'b1\'b8\cf2\par
\par
\tab\tab std::cout << \cf4 "Running on "\cf2  << GetPlatformName(platform_id) << \cf4 ", "\cf2  << GetDeviceName(platform_id, device_id) << std::endl;\par
\par
\tab\tab\cf6\b //create a queue to which we will push commands for the device\cf2\par
\tab\tab\cf6 //\'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6\'b6\'d3\'c1\'d0\'a3\'ac\'ce\'d2\'c3\'c7\u8203?\u8203?\'bd\'ab\'ce\'aa\'b8\'c3\'c9\'e8\'b1\'b8\'cd\'c6\'cb\'cd\'c3\'fc\'c1\'ee\cf2\par
\tab\tab cl::CommandQueue queue(context);\par
\b0\par
\tab\tab\cf6\b //2.2 Load & build the device code\cf2\par
\tab\tab\cf6 //2.2\'bc\'d3\'d4\'d8\'b2\'a2\'b9\'b9\'bd\'a8\'c9\'e8\'b1\'b8\'b4\'fa\'c2\'eb\cf2\par
\tab\tab cl::Program::Sources sources;\par
\par
\tab\tab AddSources(sources, \cf4 "my_kernels_1.cl"\cf2 );\par
\par
\tab\tab cl::Program program(context, sources);\par
\b0\par
\tab\tab\cf6 //build and debug the kernel code\cf2\par
\tab\tab\cf6 //\'b9\'b9\'bd\'a8\'b2\'a2\'b5\'f7\'ca\'d4\'c4\'da\'ba\'cb\'b4\'fa\'c2\'eb\cf2\par
\tab\tab\cf5 try\cf2  \{\par
\tab\tab\tab program.build();\par
\tab\tab\}\par
\tab\tab\cf5 catch\cf2  (\cf5 const\cf2  cl::Error& err) \{\par
\tab\tab\tab std::cout << \cf4 "Build Status: "\cf2  << program.getBuildInfo<CL_PROGRAM_BUILD_STATUS>(context.getInfo<CL_CONTEXT_DEVICES>()[0]) << std::endl;\par
\tab\tab\tab std::cout << \cf4 "Build Options:\\t"\cf2  << program.getBuildInfo<CL_PROGRAM_BUILD_OPTIONS>(context.getInfo<CL_CONTEXT_DEVICES>()[0]) << std::endl;\par
\tab\tab\tab std::cout << \cf4 "Build Log:\\t "\cf2  << program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(context.getInfo<CL_CONTEXT_DEVICES>()[0]) << std::endl;\par
\tab\tab\tab\cf5 throw\cf2  err;\par
\tab\tab\}\par
\par
\tab\tab\cf6\b //Part 3 - memory allocation\cf2\par
\tab\tab\cf6 //\'b5\'da3\'b2\'bf\'b7\'d6 - \'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\cf2\par
\tab\tab\cf6 //host - input\cf2\par
\tab\tab\cf6 //\'d6\'f7\'bb\'fa - \'ca\'e4\'c8\'eb\cf2\par
\tab\tab std::vector<\cf5 int\cf2 > A = \{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 \}; \cf6 //C++11 allows this type of initialisation\'a3\'a8C ++ 11\'d4\'ca\'d0\'ed\'d5\'e2\'d6\'d6\'c0\'e0\'d0\'cd\'b5\'c4\'b3\'f5\'ca\'bc\'bb\'af\'a3\'a9\cf2\par
\tab\tab std::vector<\cf5 int\cf2 > B = \{ 0, 1, 2, 0, 1, 2, 0, 1, 2, 0 \};\par
\tab\tab\par
\tab\tab\cf7 size_t\cf2  vector_elements = A.size();\cf6 //number of elements\'a3\'a8\'d4\'aa\'cb\'d8\'ca\'fd\'c1\'bf\'a3\'a9\cf2\par
\tab\tab\cf7 size_t\cf2  vector_size = A.size()*\cf5 sizeof\cf2 (\cf5 int\cf2 );\cf6 //size in bytes\'a3\'a8\'b4\'f3\'d0\'a1\'d2\'d4\'d7\'d6\'bd\'da\'ce\'aa\'b5\'a5\'ce\'bb\b0\'a3\'a9\cf2\par
\par
\tab\tab\cf6\b //host - output\cf2\par
\tab\tab\cf6 //\'d6\'f7\'bb\'fa - \'ca\'e4\'b3\'f6\cf2\par
\tab\tab std::vector<\cf5 int\cf2 > C(vector_elements);\par
\b0\par
\tab\tab\cf6\b //device - buffers\cf2\par
\tab\tab\cf6 //\'c9\'e8\'b1\'b8 - \'bb\'ba\'b3\'e5\'c7\'f8\cf2\par
\tab\tab cl::Buffer buffer_A(context, CL_MEM_READ_WRITE, vector_size);\par
\tab\tab cl::Buffer buffer_B(context, CL_MEM_READ_WRITE, vector_size);\par
\tab\tab cl::Buffer buffer_C(context, CL_MEM_READ_WRITE, vector_size);\par
\b0\par
\tab\tab\cf6\b //Part 4 - device operations\cf2\par
\tab\tab\cf6 //\'b5\'da4\'b2\'bf\'b7\'d6 - \'c9\'e8\'b1\'b8\'b2\'d9\'d7\'f7\cf2\par
\b0\par
\tab\tab\cf6\b //4.1 Copy arrays A and B to device memory\cf2\par
\tab\tab\cf6 //4.1\'bd\'ab\'ca\'fd\'d7\'e9A\'ba\'cdB\'b8\'b4\'d6\'c6\'b5\'bd\'c9\'e8\'b1\'b8\'c4\'da\'b4\'e6\cf2\par
\tab\tab queue.enqueueWriteBuffer(buffer_A, CL_TRUE, 0, vector_size, &A[0]);\par
\tab\tab queue.enqueueWriteBuffer(buffer_B, CL_TRUE, 0, vector_size, &B[0]);\par
\b0\par
\tab\tab\cf6\b //4.2 Setup and execute the kernel (i.e. device code)\cf2\par
\tab\tab\cf6 //4.2\'c9\'e8\'d6\'c3\'b2\'a2\'d6\'b4\'d0\'d0\'c4\'da\'ba\'cb\'a3\'a8\'bc\'b4\'c9\'e8\'b1\'b8\'b4\'fa\'c2\'eb\'a3\'a9\cf2\par
\tab\tab cl::Kernel kernel_add = cl::Kernel(program, \cf4 "add"\cf2 );\par
\tab\tab kernel_add.setArg(0, buffer_A);\par
\tab\tab kernel_add.setArg(1, buffer_B);\par
\tab\tab kernel_add.setArg(2, buffer_C);\par
\b0\par
\tab\tab\b queue.enqueueNDRangeKernel(kernel_add, cl::NullRange, cl::NDRange(vector_elements), cl::NullRange);\par
\par
\tab\tab\cf6 //4.3 Copy the result from device to host\cf2\par
\tab\tab\cf6 //4.3\'bd\'ab\'bd\'e1\'b9\'fb\'b4\'d3\'c9\'e8\'b1\'b8\'b8\'b4\'d6\'c6\'b5\'bd\'d6\'f7\'bb\'fa\cf2\par
\tab\tab queue.enqueueReadBuffer(buffer_C, CL_TRUE, 0, vector_size, &C[0]);\par
\par
\tab\tab std::cout << \cf4 "A = "\cf2  << A << std::endl;\par
\tab\tab std::cout << \cf4 "B = "\cf2  << B << std::endl;\par
\tab\tab std::cout << \cf4 "C = "\cf2  << C << std::endl;\par
\b0\tab\}\par
\tab\cf5 catch\cf2  (cl::Error err) \{\par
\tab\tab std::cerr << \cf4 "ERROR: "\cf2  << err.what() << \cf4 ", "\cf2  << getErrorString(err.err()) << std::endl;\par
\tab\}\par
\par
\tab\cf5 return\cf2  0;\par
\}\par
\cf0\f2\fs22\par
}
 