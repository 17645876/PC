//平均值（完成）
kernel void add(global const int* 数组, global const int* 数组个数) {
	int id = get_global_id(0);
	sum = 0;
	ave = 0;
	for (int i=0,i<N;i++)
		sum = sum + A[id]
	ave = sum/N
}
//标准差（完成）
kernel void add(global const int* 数组, global const int* 数组个数) {
	// 计算平均值
	int id = get_global_id(0);
	sum = 0;
	ave = 0;
	for (int i=0,i<N;i++)
		sum = sum + A[id]
	ave = sum/N
	//计算标准差
	e2 = 0;// 差的平方
	Se2 = 0;//差的平方和
	S = 0;//标准差
	for (int i=0,i<N;i++)
		e2 = pow(ave - A[id],2);
		Se2 = e2 + Se2;
	S = sqrt(Se2/N);
}
//冒泡排序-串行（完成）
kernel void add(global const int* A, global const int* N) {
	int id = get_global_id(0);
	int t = 0;
	for (int i=i,i<N;i++)
		for (int j = 1; j<N; j++)
			if(A[j]>A[j+1])
			{
				t = A[j];
				A[j] =A[j+1]);
				A[j+1]= t;
			}
}
//奇偶排序-并行（未完成）
kernel void add(global const int* A, global const int* N) {
	int id = get_global_id(0);
	int t = 0;
	for (int i=i,i<N/2;i++)
		for (int j = 1; j<N; j++)
			if(A[j]>A[j+1])
			{
				t = A[j];
				A[j] =A[j+1]);
				A[j+1]= t;
			}
}
//双调排序（未完成）
kernel void add(global const int* A, global const int* N) {
	int id = get_global_id(0);
	sum = 0;
	ave = 0;
	for (int i=0,i<N;i++)
		sum = sum + A[id]
	ave = sum/N
}



