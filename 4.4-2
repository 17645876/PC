kernel void S_ave(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	int sum = 0;
	//barrier(CLK_GLOBAL_MEM_FENCE);
	for (int i = 0; i < N; i++)
	{
		sum = sum + A[i];
		barrier(CLK_GLOBAL_MEM_FENCE);
	}
	B[0] = sum;
	C[0] = sum / N;
}

kernel void P_ave(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int lid = get_local_id(0);
	int N = get_global_size(0);
	int s = 1;
	B[id] = A[id];
	barrier(CLK_GLOBAL_MEM_FENCE);
	for (int i = N; i >= 1; i /= 2)
	{
		s *= 2;
		if (((id % s) == 0) && ((id + s / 2) < N))
			B[id] += B[id + s / 2];
		barrier(CLK_GLOBAL_MEM_FENCE);
	}
	C[0] = B[0] / N;
}

kernel void S_Sd(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	int sum = 0;
	int temp1 = 0;
	int temp2 = 0;
	int ave = 0;
	barrier(CLK_GLOBAL_MEM_FENCE);

	for (int i = 1; i < N; i++)
	{
		sum = sum + A[i];
	}
	ave = sum / N;

	barrier(CLK_GLOBAL_MEM_FENCE);
	for (int i = 1; i < N; i++)
	{
		B[id] = (ave - A[id])*(ave - A[id]);
		temp2 += B[id];
	}
	C[0] = temp2 / N;
}


//------------average & standard deviation------------
//Sorting use serial implenmentation way (Bubble sort) -- return max
kernel void S_Bs_max(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	B[id] = A[id];
	int t = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (B[j] < B[j + 1])
			{
				t = B[j];
				B[j] = B[j + 1];
				B[j + 1] = t;
			}
		}
	}
	C[0] = B[0];
}

//Sorting use parallel implenmentation way (Odd Even sort) -- return max
kernel void P_OE_max(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	B[id] = A[id];
	int t = 0;
	for (int i = 0; i < N / 2; i++)
	{
		for (int j = 1; j < N; j += 2)
		{
			if (B[j - 1] < B[j])
			{
				t = B[j - 1];
				B[j - 1] = B[j];
				B[j] = t;
			}
		}
		for (int j = 1; j < N; j += 2)
		{
			if (B[j] < B[j + 1])
			{
				t = B[j];
				B[j] = B[j + 1];
				B[j + 1] = t;
			}
		}
	}
	C[0] = B[0];
}

//Sorting use serial implenmentation way (Bubble sort) -- return min
kernel void S_Bs_min(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	B[id] = A[id];
	int t = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (B[j] < B[j + 1])
			{
				t = B[j];
				B[j] = B[j + 1];
				B[j + 1] = t;
			}
		}
	}
	C[0] = B[N - 1];
}

//Sorting use parallel implenmentation way (Odd Even sort) -- return min
kernel void P_OE_min(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	B[id] = A[id];
	int t = 0;
	for (int i = 0; i < N / 2; i++)
	{
		for (int j = 1; j < N; j += 2)
		{
			if (B[j - 1] < B[j])
			{
				t = B[j - 1];
				B[j - 1] = B[j];
				B[j] = t;
			}
		}
		for (int j = 1; j < N; j += 2)
		{
			if (B[j] < B[j + 1])
			{
				t = B[j];
				B[j] = B[j + 1];
				B[j + 1] = t;
			}
		}
	}
	C[0] = B[N - 1];
}

//Sorting use serial implenmentation way (Bubble sort) -- return median
kernel void S_Bs_median(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	B[id] = A[id];
	int t = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (B[j] < B[j + 1])
			{
				t = B[j];
				B[j] = B[j + 1];
				B[j + 1] = t;
			}
		}
	}
	C[0] = B[N / 2 - 1];
}

//Sorting use parallel implenmentation way (Odd Even sort) -- return median
kernel void P_OE_median(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	B[id] = A[id];
	int t = 0;
	for (int i = 0; i < N / 2; i++)
	{
		for (int j = 1; j < N; j += 2)
		{
			if (B[j - 1] < B[j])
			{
				t = B[j - 1];
				B[j - 1] = B[j];
				B[j] = t;
			}
		}
		for (int j = 1; j < N; j += 2)
		{
			if (B[j] < B[j + 1])
			{
				t = B[j];
				B[j] = B[j + 1];
				B[j + 1] = t;
			}
		}
	}
	C[0] = B[N / 2 - 1];
}

//Sorting use serial implenmentation way (Bubble sort) -- return 25th
kernel void S_Bs_25th(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	B[id] = A[id];
	int t = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (B[j] < B[j + 1])
			{
				t = B[j];
				B[j] = B[j + 1];
				B[j + 1] = t;
			}
		}
	}
	C[0] = B[N / 4 - 1];
}

//Sorting use parallel implenmentation way (Odd Even sort) -- return 25th
kernel void P_OE_25th(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	B[id] = A[id];
	int t = 0;
	for (int i = 0; i < N / 2; i++)
	{
		for (int j = 1; j < N; j += 2)
		{
			if (B[j - 1] < B[j])
			{
				t = B[j - 1];
				B[j - 1] = B[j];
				B[j] = t;
			}
		}
		for (int j = 1; j < N; j += 2)
		{
			if (B[j] < B[j + 1])
			{
				t = B[j];
				B[j] = B[j + 1];
				B[j + 1] = t;
			}
		}
	}
	C[0] = B[N / 4 - 1];
}

//Sorting use serial implenmentation way (Bubble sort) -- return 75th
kernel void S_Bs_75th(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	B[id] = A[id];
	int t = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (B[j] < B[j + 1])
			{
				t = B[j];
				B[j] = B[j + 1];
				B[j + 1] = t;
			}
		}
	}
	C[0] = B[N * 3 / 4 - 1];
}

//Sorting use parallel implenmentation way (Odd Even sort) -- return 75th
kernel void P_OE_75th(global const int* A, global int* B, global int* C) {
	int id = get_global_id(0);
	int N = get_global_size(0);
	B[id] = A[id];
	int t = 0;
	for (int i = 0; i < N / 2; i++)
	{
		for (int j = 1; j < N; j += 2)
		{
			if (B[j - 1] < B[j])
			{
				t = B[j - 1];
				B[j - 1] = B[j];
				B[j] = t;
			}
		}
		for (int j = 1; j < N; j += 2)
		{
			if (B[j] < B[j + 1])
			{
				t = B[j];
				B[j] = B[j + 1];
				B[j + 1] = t;
			}
		}
	}
	C[0] = B[N * 3 / 4 - 1];
}
